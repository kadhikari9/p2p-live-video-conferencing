/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ContactListPanel.java
 *
 * Created on Nov 5, 2010, 11:45:37 AM
 */

package org.ioe.bct.p2pconference.ui;

import org.ioe.bct.p2pconference.ui.controls.ConferenceMediator;
import java.awt.Color;
import java.awt.Component;
import java.awt.FlowLayout;
import java.util.ArrayList;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import javax.swing.ListSelectionModel;
import org.ioe.bct.p2pconference.dataobject.Request;


import org.ioe.bct.p2pconference.patterns.mediator.Colleague;
import org.ioe.bct.p2pconference.patterns.mediator.Mediator;
import org.ioe.bct.p2pconference.patterns.observer.DisplayElement;
import org.ioe.bct.p2pconference.patterns.observer.Observer;
import org.ioe.bct.p2pconference.patterns.observer.Subject;
import org.ioe.bct.p2pconference.utils.Notification;
import org.ioe.bct.p2pconference.ui.controls.ContactList;
/**
 *
 * @author kusu
 */
public class ContactListPanel extends javax.swing.JPanel implements Observer, Colleague,DisplayElement{

    
    private ArrayList contactArray=new ArrayList();
   
    private ListCellRenderer imageCellRenderer=new ImageCellRenderer();

    private Subject contList;
    private Mediator conferenceMediator;

     public ContactListPanel(Mediator confMediator) {
         
         this.conferenceMediator=confMediator;
       //  conferenceMediator.addColleague(this);
//       jList1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
//       jList1.setModel(new MyListModel());
       
    }

     public ContactListPanel setList(Subject contList){
         contList.registerObserver(this);
         this.contList=contList;

         initComponents();
         return this;

     }

    public void initList(){
        //Read data from database(Contact List)
        jList1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        JPanel kPanel=new JPanel(new FlowLayout(FlowLayout.LEFT));
        kPanel.add(new JLabel("test shell"));
        kPanel.setName("test shell");
        JPanel aPanel=new JPanel(new FlowLayout(FlowLayout.LEFT));
        aPanel.add(new JLabel("admin"));
        aPanel.setName("admin");
        contactArray.add(kPanel);
        contactArray.add(aPanel);
        
        jList1.setCellRenderer(imageCellRenderer);

        jList1.setListData(contactArray.toArray());
    }

  

    public void setMediator(Mediator m) {
        this.conferenceMediator=m;
    }

    public void receive(String message, Colleague sender, Object body) {
       //do nothing
          System.out.println("Loadinggggggg contact info ");
    }

    private class ImageCellRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {

                if(value instanceof JPanel ) {

                Component component=(Component) value;
                 component.setForeground (Color.white);
              component.setBackground (isSelected ? Color.MAGENTA : Color.white);
              return component;
            }
             else {
                     return new JLabel("");
                  }
        }
    }


    

    /** Creates new form ContactListPanel */
   

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = ((ContactList)contList).createList();

        setLayout(new java.awt.BorderLayout());

        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        initList();
        jScrollPane1.setViewportView(jList1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        // TODO add your handling code here:
        sendSelectionChangeMsg();
    }//GEN-LAST:event_jList1ValueChanged


    public void sendSelectionChangeMsg() {
        if(jList1.getSelectedIndex()<0) {
            return;
        }
        Object dataItem=jList1.getSelectedValue();
          conferenceMediator.sendMessage(ConferenceMediator.CONT_SELECTION_CHANGED,this,dataItem);
    }

    public void display() {
       //do nothing java listmodel handles this
       
    }

    public void update(Notification type) {
       switch(type.getName()){

           case Notification.CONTACT_ADDED:
                addnewContact(type.getBody());
                break;
           case Notification.CONTACT_DELETED:
               deleteNewContact(type.getBody());
               break;

       }
    }

    public void deleteNewContact(Object body ){
//        User u=(User)body;
//        JLabel newLabel=new JLabel(u.getName());
//       contactArray.add(newLabel);
       
    }

    public void addnewContact(Object body) {
        Request u=(Request)body;
        JLabel newLabel=new JLabel(u.getTo());
//        String newLabel=u.getTo();
        JPanel newPanel=new JPanel(new FlowLayout(FlowLayout.LEFT));
        newPanel.add(newLabel);
        contactArray.add(newPanel);
        jList1.setListData(contactArray.toArray());
        System.out.println("CONTACT ADDED");
       
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

}
